package main;

public class Sort {
	/*
	 * Tablica danych t , n to romiar tablicy
	 */
	public static void insertionSort(int t[], int n) {
		if(n == 0) {
			System.out.println("Brak argumentów");
		}
		for (int i = 1; i < n; i++) {
			int key = t[i];
			int j = i-1;
			while(j >= 0 && key < t[j]) {
				t[j+1]=t[j];
				j--;
			}
			t[j+1] = key;
		}
	}
	
	public static int[] mergeSort(int t[], int n) throws Exception {
		if(n == 0) {
			throw new Exception("Brak Argumentów");
			
		}
		if (n == 1) {
			return t;
		} else {
			int half = n/2;
			int shalf = n-half;
			int[] A = new int[half];
			int[] B = new int[shalf];
			for(int i = 0; i < n; i++){
				if(i<half) {
					A[i]=t[i];
				} else {
					B[i-half] = t[i];
				}
			}
			t = merge(mergeSort(A,half), half, mergeSort(B,shalf),shalf);
		}
		return t;
	}
	
	public static int[] merge(int A[], int dlA, int B[], int dlB) {
		
		int[] ret = new int[dlA+dlB];
		int j = 0;			// indeks tablicy A
		int k = 0;			// indeks tablicy B
		while(j < dlA && k < dlB) {
			if(A[j]<B[k]) {
				ret[j+k] = A[j];
				j++;
			} else if (A[j] > B[k]) {
				ret[j+k] = B[k];
				k++;
			} else {
				ret[j+k] = A[j];
				j++;
			}
		}
		
		// wiemy ze pierwsza tablica juz skonczyla a w drugiej sa same wieksze elementy
		
		while(k < dlB) {
			ret[j+k] = B[k];
			k++;
		}
	
		while(j < dlA) {
			ret[j+k] = A[j];
			j++;
		}
		
		return ret;
	}
	
	public static void drukuj(int[] t) {
		for(int i : t) {
			System.out.print(" "+i);
		}
		System.out.print("\n");
	}
	
	public static void main(String[] args) {
		int t[] = {1};
		System.out.println("Dlugosc tablicy: "+t.length);
		//insertionSort(t,t.length);
		try {
			t = mergeSort(t,t.length);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		drukuj(t);
	}
}
