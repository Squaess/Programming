import java.util.Random;

import org.jgrapht.alg.ConnectivityInspector;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleWeightedGraph;

public class Network {
	private static int N = 20;
	
	private static SimpleWeightedGraph<String, DefaultWeightedEdge> net1() {
		
		SimpleWeightedGraph<String, DefaultWeightedEdge> g = new SimpleWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);
		
		for(int i = 1; i<=N; i++) {
			g.addVertex("v"+Integer.toString(i));
		}
		
		for(int i = 1; i < N; i++) {
			double p = 0.95;
			
			DefaultWeightedEdge edge = g.addEdge("v"+Integer.toString(i), "v"+Integer.toString(i+1));
			g.setEdgeWeight(edge, p);
		}
		
		return g;
	}
	
	private static void test(SimpleWeightedGraph<String, DefaultWeightedEdge> g) {
		
		System.out.println("Graf: "+g.toString());
		int suma = 0;
		for(int i = 0; i<100000; i++) {
			int a = testNetwork(g);
			suma += a;
		}
		double probability = (suma/100000 * 1.0) *100.0;
		System.out.println("Prawdopodobieñstwo nierozspójnienia wynosi = "+probability+" %");
		System.out.println("Ile przesz³o na 100000: "+suma);
		
	}
	
	private static int testNetwork(SimpleWeightedGraph<String, DefaultWeightedEdge> g) {
		for( int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if( i < j ) {
					if(g.containsEdge("v"+Integer.toString(i), "v"+Integer.toString(j))) {
						Random r = new Random();
						double p = 0 + (1) * r.nextDouble();
						if(p > g.getEdgeWeight(g.getEdge("v"+Integer.toString(i), "v"+Integer.toString(j)))) {	
//							System.out.println("v"+Integer.toString(i)+ " v"+Integer.toString(j));
							g.removeEdge("v"+Integer.toString(i), "v"+Integer.toString(j));						
						}
					}
				}
			}	
			ConnectivityInspector inspector = new ConnectivityInspector(g);
			if(!inspector.isGraphConnected()) {
//				System.out.println("Niespójny");
				return 0;
			} 
		}
		
//		System.out.println("Spójny");
		return 1;
	}
	
	public static void main (String[] args) {
		test(net1());
		SimpleWeightedGraph<String, DefaultWeightedEdge> g = net1();
		DefaultWeightedEdge edge = g.addEdge("v1", "v20"); 
		g.setEdgeWeight(edge, 0.95);
		test(g);
	}
}
