
public class Network {

	private static mojGraph gen() {
		mojGraph graph = new mojGraph();
		
		graph.addVertex("v1");
		graph.addVertex("v2");
		graph.addVertex("v3");
		graph.addVertex("v4");
		graph.addVertex("v5");
		graph.addVertex("v6");
		graph.addVertex("v7");
		graph.addVertex("v8");
		graph.addVertex("v9");
		graph.addVertex("v10");

		graph.addEdge("v1", "v2", 1000);
		graph.addEdge("v2", "v3", 1000);
		graph.addEdge("v3", "v4", 1000);
		graph.addEdge("v4", "v5", 1000);
		graph.addEdge("v5", "v6", 1000);
		graph.addEdge("v6", "v7", 1000);
		graph.addEdge("v7", "v8", 1000);
		graph.addEdge("v8", "v9", 1000);
		graph.addEdge("v9", "v10", 1000);
		graph.addEdge("v10", "v1", 1000);
		graph.addEdge("v1", "v9", 4000);
		graph.addEdge("v2", "v9", 4000);
		graph.addEdge("v3", "v9", 4000);
		graph.addEdge("v3", "v8", 1000);
		graph.addEdge("v3", "v7", 4000);
		graph.addEdge("v4", "v7", 4000);
		graph.addEdge("v5", "v7", 4000);
		
		graph.clearConnections();
		graph.sendPacket("v1", "v10", 500);
		graph.sendPacket("v4", "v8", 300);
		graph.sendPacket("v7", "v10", 200);
		graph.sendPacket("v2", "v8", 100);
		graph.sendPacket("v4", "v8", 300);
		
		return graph;
	}
	
	public static void testNetwork(int N, double p, double Tmax)
	{		
		int success = 0;
		int failure = 0;
		int disconnect = 0;
		
		for(int n=0; n<=N; n++)
		{
			MyGraph testGraph = generateGraph();
			
			testGraph.test(p);
			if(testGraph.isItConnected())
			{
				if(testGraph.getDelay() < Tmax)
				success++;
				else
				failure++;
			}
			else
			{
				disconnect++;
			}
		}
		
		System.out.println("Iloœc prób: " + N);	
		System.out.println("Iloœc sukcesów: " + success);	
		System.out.println("Iloœc pora¿ek: " + failure);
		System.out.println("Iloœc rozspójnieñ: " + disconnect);
		
		double reliability = (N*1.0 - (failure + disconnect)*1.0)/(N * 1.0) * 100.0;
		
		System.out.println("Niezawodnoœc: " + reliability + "%");
	}
	
	public static void main(String[] args)
	{	
		System.out.println("T = " + gen().getDelay());	
		testNetwork(50000, 0.9, -0.001);
	}
}
